//============================================================================
// Name        : e11_04.cpp
// Author      : Naoto Beppu
// Version     :
// Copyright   : Your copyright notice
// Description : 演習11-4
//               コンストラクタ初期化によって明示的に初期化しない場合に、メンバ部分オブジェクトが
//               デフォルトコンストラクタで初期化されることをプログラムを作成して確認せよ。
//============================================================================

/* -- 実行結果 -- */
// ・コンストラクタ初期化ありの場合
/*  鈴木君の口座
	開設日= 2125年1月24日

    武田君の口座
    開設日= 2123年7月15日
*/

// ・コンストラクタ初期化なしの場合
/*  鈴木君の口座
	開設日= 2018年5月1日

	武田君の口座
	開設日= 2018年5月1日
	⇨ Dateクラスのコンストラクタで実装されている通り、プログラム実行時点の日時を設定し、表示するという結果になった。
*/

#include <iostream>
#include "Account.h"

using namespace std;

int main() {
	// 鈴木君の情報を設定
	Account suzuki("鈴木龍一", "12345678", 1000, 2125, 1, 24);
	// 武田君の情報を設定
	Account takeda("武田浩文", "87654321", 200, 2123, 7, 15);

	/*-- 日付がデフォルトコンストラクタによって初期化されていることを確認することが目的となるため、
	 *   それぞれ日付を表示する操作のみ実行
	 */

	// 鈴木君の口座であることを知らせる
	cout << "鈴木君の口座" << endl;
	// 口座開設日を表示
	cout << "開設日= " << suzuki.opening_date() << endl;

	// 武田君の口座であることを知らせる
	cout << "\n武田君の口座" << endl;
	// 口座開設日を表示。ここでは、メンバごとの値をgetして表示
	cout << "開設日= " << takeda.opening_date().year() << "年"
			<< takeda.opening_date().month() << "月"
			<< takeda.opening_date().day() << "日"
			<< endl;

	// 正常終了
	return 0;
}
