演習3-09 
演習3-10 
正の整数値が入力されなかったときに、0が表示されプログラムが終了してしまうと思います。
そのため、「正の整数値」に入力を制限する処理が必要になります。

演習3-11
１．正の整数値に入力を制限すること。

演習3-12
１．変数名 i_n となっていますが、単に「nの値」だと分かりにくいと思います。
例えば、int i_n → int i_InputNumber とかにすると意味が伝わりやすいと思います。
２．for文のループ内で毎回if文の判定を行っていると処理が重くなる原因になったりします。

	for (int i = 1; i < i_n; i++) {
		// 1を1ずつ加算し、nの値と等しくなるまで繰り返す
		cout << i;
		// +を表示
		cout << " + ";
		// 合計値にiの値を加算していく
		i_sum += i;
	}
	cout << i_n; 

でも同じ動作をしますが、if文の判定が無いため無駄が無いです。
小規模のプログラムですと気になりませんが、何千何万回ループするプログラムなどでは違いが出てきたりします。

演習3-13
１．変数名の命名規則 int height → int i_height に修正してください(幾つかあります)
２．身長の上限／下限をユーザーが入力したときに、身長の下限が上限を超えてしまうことがありますので入力を制限する
ようにしたほうが良いです。

演習3-14
１．コメントが適切ではない　string ret = "\\n"; // 改行文字　→  string s_ShowString = "*"; // 表示する文字
コメントで改行文字と記載していると改行様に定義していると 勘違いしてしまうので修正して欲しいです。
また、int の場合 変数名に [ i_ ]を付けるようにしているようですので
stringの場合も 変数名に[ s_ ] を先頭につけてあげてください。
float の場合 [ f_ ] ,double の場合 [ d_ ]とかして欲しいです。

演習3-15
１．変数名の命名規則を見直して欲しいです。

演習3-16
指摘なし

演習3-17
「1~12以外の値が入力された場合は再入力させるように変更したプログラムを作成せよ。」とのことなので
例えば、-1が入力された場合には季節を判定するif文まで処理が進みません。

		do { // 以下、実行

			/* 処理を埋め込む場所 */
			/*  繰り返し */

			// 月の入力を促す
			cout << "季節を求めます。\n何月ですか：";
			// キーボードから値を読み込む
			cin >> month;
			
			/* 繰り返し終了( month に1～12の整数値が入力される ) */
			
			/* ここにきた時には、必ず1～12の整数が month に入っている状態 */

			if (month >= 3 && month <= 5) { // 3~5月
				// 季節が春であると出力
				cout << "それは春です。" << endl;


演習3-18
１．const int i_end = 9 は九九の演算で使用している変数なので桁数の判定にも使うのはバグの原因にもなったりします。
桁数を判定するための変数は別で定義して欲しいです

遠陬3-19
指摘なし

演習3-20
１．for文の中でif文の判定を毎回行うのは処理が重くなる原因になってしまいます。
修正方針として、if文を使わずに作成すること。
		空文字を表示するfor文のループと*を表示するfor文のループ処理に分けて欲しいです。

演習3-21
１．変数の命名規則　人によって意見は異なってくると思いますが、 変数名で単語を区切るのにアンダーバーは使わないほうが良いです。
変数名の頭に i_ が抜けています。
例えば、int width_max = 0; // 最下段の数　は int i_WidthMax = 0; // 最下段の数 とかにしたほうが良いです。

変数名に限らず、アンダーバーで単語を区切るのは避けたほうが良いと思います。
関数名でも、show_blanks としていますが ShowBlanks としたほうが良いです。

関数を作成して、空白文字を表示させるのは無駄が無くなるため良いと思います。
